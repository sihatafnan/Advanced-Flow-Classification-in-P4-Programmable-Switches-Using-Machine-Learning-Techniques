{
  "header_types" : [
    {
      "name" : "scalars_0",
      "id" : 0,
      "fields" : [
        ["arrival_time_0", 48, false],
        ["time_threshold_0", 48, false],
        ["duration_threshold_0", 48, false],
        ["last_time_0", 48, false],
        ["size_threshold_0", 32, false],
        ["size_threshold_limit_0", 32, false],
        ["key1_0", 32, false],
        ["key2_0", 32, false],
        ["key3_0", 32, false],
        ["key4_0", 32, false],
        ["size1_0", 32, false],
        ["size2_0", 32, false],
        ["size3_0", 32, false],
        ["size4_0", 32, false],
        ["time1_0", 48, false],
        ["time2_0", 48, false],
        ["time3_0", 48, false],
        ["time4_0", 48, false],
        ["val1_0", 1, false],
        ["val2_0", 1, false],
        ["val3_0", 1, false],
        ["val4_0", 1, false],
        ["f_0", 1, false],
        ["size_overflow_0", 1, false],
        ["duration_overflow_0", 1, false],
        ["tmp", 32, false],
        ["tmp_0", 32, false],
        ["tmp_1", 32, false],
        ["tmp_2", 32, false],
        ["tmp_3", 32, false],
        ["tmp_4", 32, false],
        ["tmp_5", 32, false],
        ["tmp_6", 32, false],
        ["tmp_7", 48, false],
        ["tmp_8", 48, false],
        ["tmp_9", 48, false],
        ["tmp_10", 48, false],
        ["tmp_11", 48, false],
        ["tmp_12", 48, false],
        ["tmp_13", 48, false],
        ["tmp_14", 48, false],
        ["tmp_15", 32, false],
        ["tmp_16", 1, false],
        ["tmp_17", 48, false],
        ["tmp_18", 32, false],
        ["tmp_19", 32, false],
        ["tmp_20", 1, false],
        ["tmp_21", 48, false],
        ["tmp_22", 32, false],
        ["tmp_23", 32, false],
        ["tmp_24", 1, false],
        ["tmp_25", 48, false],
        ["tmp_26", 32, false],
        ["tmp_27", 32, false],
        ["tmp_28", 1, false],
        ["tmp_29", 48, false],
        ["tmp_30", 32, false],
        ["tmp_31", 1, false],
        ["tmp_32", 1, false],
        ["tmp_33", 1, false],
        ["tmp_34", 1, false],
        ["tmp_35", 1, false],
        ["tmp_36", 1, false],
        ["tmp_37", 1, false],
        ["metadata_t.l4_src_port", 16, false],
        ["metadata_t.l4_dst_port", 16, false],
        ["metadata_t.l3_admit", 1, false],
        ["metadata_t.dst_vlan", 12, false],
        ["metadata_t.overflow_flag", 1, false]
      ]
    },
    {
      "name" : "tracking_metadata_t",
      "id" : 1,
      "fields" : [
        ["mKeyInTable", 32, false],
        ["mFirstTimeInTable", 48, false],
        ["mLastTimeInTable", 48, false],
        ["mSizeInTable", 32, false],
        ["mIndex", 32, false]
      ]
    },
    {
      "name" : "standard_metadata",
      "id" : 2,
      "fields" : [
        ["ingress_port", 9, false],
        ["egress_spec", 9, false],
        ["egress_port", 9, false],
        ["instance_type", 32, false],
        ["packet_length", 32, false],
        ["enq_timestamp", 32, false],
        ["enq_qdepth", 19, false],
        ["deq_timedelta", 32, false],
        ["deq_qdepth", 19, false],
        ["ingress_global_timestamp", 48, false],
        ["egress_global_timestamp", 48, false],
        ["mcast_grp", 16, false],
        ["egress_rid", 16, false],
        ["checksum_error", 1, false],
        ["parser_error", 32, false],
        ["priority", 3, false],
        ["_padding", 3, false]
      ]
    },
    {
      "name" : "packet_out_header_t",
      "id" : 3,
      "fields" : [
        ["egress_port", 16, false],
        ["mcast_grp", 16, false]
      ]
    },
    {
      "name" : "packet_in_header_t",
      "id" : 4,
      "fields" : [
        ["algo_indicator", 16, false],
        ["src_ip", 32, false],
        ["dst_ip", 32, false],
        ["src_port", 16, false],
        ["dst_port", 16, false],
        ["proto", 8, false],
        ["ingress_port", 16, false]
      ]
    },
    {
      "name" : "ethernet_t",
      "id" : 5,
      "fields" : [
        ["dstAddr", 48, false],
        ["srcAddr", 48, false],
        ["etherType", 16, false]
      ]
    },
    {
      "name" : "ipv4_t",
      "id" : 6,
      "fields" : [
        ["version", 4, false],
        ["ihl", 4, false],
        ["diffserv", 8, false],
        ["totalLen", 16, false],
        ["identification", 16, false],
        ["flags", 3, false],
        ["fragOffset", 13, false],
        ["ttl", 8, false],
        ["protocol", 8, false],
        ["hdrChecksum", 16, false],
        ["srcAddr", 32, false],
        ["dstAddr", 32, false]
      ]
    },
    {
      "name" : "tcp_t",
      "id" : 7,
      "fields" : [
        ["srcPort", 16, false],
        ["dstPort", 16, false],
        ["seqNo", 32, false],
        ["ackNo", 32, false],
        ["dataOffset", 4, false],
        ["res", 4, false],
        ["flags", 8, false],
        ["window", 16, false],
        ["checksum", 16, false],
        ["urgentPtr", 16, false]
      ]
    },
    {
      "name" : "udp_t",
      "id" : 8,
      "fields" : [
        ["srcPort", 16, false],
        ["dstPort", 16, false],
        ["length_", 16, false],
        ["checksum", 16, false]
      ]
    }
  ],
  "headers" : [
    {
      "name" : "track_meta_0",
      "id" : 0,
      "header_type" : "tracking_metadata_t",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "scalars",
      "id" : 1,
      "header_type" : "scalars_0",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "standard_metadata",
      "id" : 2,
      "header_type" : "standard_metadata",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "packet_out",
      "id" : 3,
      "header_type" : "packet_out_header_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "packet_in",
      "id" : 4,
      "header_type" : "packet_in_header_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "ethernet",
      "id" : 5,
      "header_type" : "ethernet_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "ipv4",
      "id" : 6,
      "header_type" : "ipv4_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "tcp",
      "id" : 7,
      "header_type" : "tcp_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "udp",
      "id" : 8,
      "header_type" : "udp_t",
      "metadata" : false,
      "pi_omit" : true
    }
  ],
  "header_stacks" : [],
  "header_union_types" : [],
  "header_unions" : [],
  "header_union_stacks" : [],
  "field_lists" : [],
  "errors" : [
    ["NoError", 1],
    ["PacketTooShort", 2],
    ["NoMatch", 3],
    ["StackOutOfBounds", 4],
    ["HeaderTooShort", 5],
    ["ParserTimeout", 6],
    ["ParserInvalidArgument", 7]
  ],
  "enums" : [],
  "parsers" : [
    {
      "name" : "parser",
      "id" : 0,
      "init_state" : "start",
      "parse_states" : [
        {
          "name" : "start",
          "id" : 0,
          "parser_ops" : [],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x00ff",
              "mask" : null,
              "next_state" : "parse_packet_out"
            },
            {
              "value" : "default",
              "mask" : null,
              "next_state" : "parse_ethernet"
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_port"]
            }
          ]
        },
        {
          "name" : "parse_packet_out",
          "id" : 1,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "packet_out"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "value" : "default",
              "mask" : null,
              "next_state" : "parse_ethernet"
            }
          ],
          "transition_key" : []
        },
        {
          "name" : "parse_ethernet",
          "id" : 2,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "ethernet"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x0800",
              "mask" : null,
              "next_state" : "parse_ipv4"
            },
            {
              "value" : "default",
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["ethernet", "etherType"]
            }
          ]
        },
        {
          "name" : "parse_ipv4",
          "id" : 3,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "ipv4"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x06",
              "mask" : null,
              "next_state" : "parse_tcp"
            },
            {
              "type" : "hexstr",
              "value" : "0x11",
              "mask" : null,
              "next_state" : "parse_udp"
            },
            {
              "value" : "default",
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["ipv4", "protocol"]
            }
          ]
        },
        {
          "name" : "parse_tcp",
          "id" : 4,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "tcp"
                }
              ],
              "op" : "extract"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_src_port"]
                },
                {
                  "type" : "field",
                  "value" : ["tcp", "srcPort"]
                }
              ],
              "op" : "set"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_dst_port"]
                },
                {
                  "type" : "field",
                  "value" : ["tcp", "dstPort"]
                }
              ],
              "op" : "set"
            }
          ],
          "transitions" : [
            {
              "value" : "default",
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : []
        },
        {
          "name" : "parse_udp",
          "id" : 5,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "udp"
                }
              ],
              "op" : "extract"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_src_port"]
                },
                {
                  "type" : "field",
                  "value" : ["udp", "srcPort"]
                }
              ],
              "op" : "set"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_dst_port"]
                },
                {
                  "type" : "field",
                  "value" : ["udp", "dstPort"]
                }
              ],
              "op" : "set"
            }
          ],
          "transitions" : [
            {
              "value" : "default",
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : []
        }
      ]
    }
  ],
  "parse_vsets" : [],
  "deparsers" : [
    {
      "name" : "deparser",
      "id" : 0,
      "source_info" : {
        "filename" : "includes/parser.p4",
        "line" : 58,
        "column" : 8,
        "source_fragment" : "basic_tutor_switch_deparser"
      },
      "order" : ["packet_in", "ethernet", "ipv4", "tcp", "udp"]
    }
  ],
  "meter_arrays" : [],
  "counter_arrays" : [],
  "register_arrays" : [
    {
      "name" : "basic_tutorial_ingress.packet_start_time_stage1",
      "id" : 0,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 30,
        "column" : 28,
        "source_fragment" : "packet_start_time_stage1"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_last_time_stage1",
      "id" : 1,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 31,
        "column" : 28,
        "source_fragment" : "packet_last_time_stage1"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_size_stage1",
      "id" : 2,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 32,
        "column" : 28,
        "source_fragment" : "packet_size_stage1"
      },
      "size" : 1024,
      "bitwidth" : 32
    },
    {
      "name" : "basic_tutorial_ingress.packet_start_time_stage2",
      "id" : 3,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 34,
        "column" : 28,
        "source_fragment" : "packet_start_time_stage2"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_last_time_stage2",
      "id" : 4,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 35,
        "column" : 28,
        "source_fragment" : "packet_last_time_stage2"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_size_stage2",
      "id" : 5,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 36,
        "column" : 28,
        "source_fragment" : "packet_size_stage2"
      },
      "size" : 1024,
      "bitwidth" : 32
    },
    {
      "name" : "basic_tutorial_ingress.packet_start_time_stage3",
      "id" : 6,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 38,
        "column" : 28,
        "source_fragment" : "packet_start_time_stage3"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_last_time_stage3",
      "id" : 7,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 39,
        "column" : 28,
        "source_fragment" : "packet_last_time_stage3"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_size_stage3",
      "id" : 8,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 40,
        "column" : 28,
        "source_fragment" : "packet_size_stage3"
      },
      "size" : 1024,
      "bitwidth" : 32
    },
    {
      "name" : "basic_tutorial_ingress.packet_start_time_stage4",
      "id" : 9,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 42,
        "column" : 28,
        "source_fragment" : "packet_start_time_stage4"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_last_time_stage4",
      "id" : 10,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 43,
        "column" : 28,
        "source_fragment" : "packet_last_time_stage4"
      },
      "size" : 1024,
      "bitwidth" : 48
    },
    {
      "name" : "basic_tutorial_ingress.packet_size_stage4",
      "id" : 11,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 44,
        "column" : 28,
        "source_fragment" : "packet_size_stage4"
      },
      "size" : 1024,
      "bitwidth" : 32
    },
    {
      "name" : "basic_tutorial_ingress.bloom_filter",
      "id" : 12,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 81,
        "column" : 27,
        "source_fragment" : "bloom_filter"
      },
      "size" : 4096,
      "bitwidth" : 1
    }
  ],
  "calculations" : [
    {
      "name" : "calc",
      "id" : 0,
      "algo" : "crc16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_0",
      "id" : 1,
      "algo" : "crc32",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_1",
      "id" : 2,
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_2",
      "id" : 3,
      "algo" : "crc16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_3",
      "id" : 4,
      "algo" : "crc16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_4",
      "id" : 5,
      "algo" : "crc32",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_5",
      "id" : 6,
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_6",
      "id" : 7,
      "algo" : "crc16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_src_port"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.l4_dst_port"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        }
      ]
    },
    {
      "name" : "calc_7",
      "id" : 8,
      "source_info" : {
        "filename" : "includes/checksums.p4",
        "line" : 20,
        "column" : 8,
        "source_fragment" : "update_checksum( ..."
      },
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "version"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ihl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "diffserv"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "totalLen"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "identification"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "flags"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "fragOffset"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ttl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        }
      ]
    }
  ],
  "learn_lists" : [],
  "actions" : [
    {
      "name" : "drop",
      "id" : 0,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "NoAction",
      "id" : 1,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "basic_tutorial_ingress.ipv4_forwarding.send_to_cpu",
      "id" : 2,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00ff"
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 14,
            "column" : 8,
            "source_fragment" : "standard_metadata.egress_spec = 255"
          }
        },
        {
          "op" : "add_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "packet_in"
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 15,
            "column" : 8,
            "source_fragment" : "hdr.packet_in.setValid()"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "ingress_port"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_port"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 16,
            "column" : 8,
            "source_fragment" : "hdr.packet_in.ingress_port = (bit<16>)standard_metadata.ingress_port"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.ipv4_forwarding.ipv4_forward",
      "id" : 3,
      "runtime_data" : [
        {
          "name" : "dstAddr",
          "bitwidth" : 48
        },
        {
          "name" : "port",
          "bitwidth" : 9
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "runtime_data",
              "value" : 1
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 20,
            "column" : 8,
            "source_fragment" : "standard_metadata.egress_spec = port"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ethernet", "srcAddr"]
            },
            {
              "type" : "field",
              "value" : ["ethernet", "dstAddr"]
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 21,
            "column" : 8,
            "source_fragment" : "hdr.ethernet.srcAddr = hdr.ethernet.dstAddr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ethernet", "dstAddr"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 22,
            "column" : 8,
            "source_fragment" : "hdr.ethernet.dstAddr = dstAddr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "ttl"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "+",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "ttl"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 23,
            "column" : 8,
            "source_fragment" : "hdr.ipv4.ttl = hdr.ipv4.ttl - 1"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.hash1",
      "id" : 4,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_15"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffec"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_15"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "protocol"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x06"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 96,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_15"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xfff8"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_15"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["ipv4", "protocol"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x06"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 96,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "arrival_time_0"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 97,
            "column" : 8,
            "source_fragment" : "arrival_time = standard_metadata.ingress_global_timestamp"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 100,
            "column" : 8,
            "source_fragment" : "hash(track_meta.mIndex, HashAlgorithm.crc16, (bit<32>)0, {ipAddr1, ..."
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "last_time_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage1"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 107,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage1.read(last_time, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mSizeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage1"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 108,
            "column" : 8,
            "source_fragment" : "packet_size_stage1.read(track_meta.mSizeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mFirstTimeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage1"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 109,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage1.read(track_meta.mFirstTimeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_16"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_16"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : ">",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "-",
                              "left" : {
                                "type" : "field",
                                "value" : ["standard_metadata", "ingress_global_timestamp"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "last_time_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffffffffffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "field",
                        "value" : ["scalars", "time_threshold_0"]
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 110,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_16"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_16"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "-",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "last_time_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffffffffffff"
                              }
                            }
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time_threshold_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 110,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_17"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["track_meta_0", "mFirstTimeInTable"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_17"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_16"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 113,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_17"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_17"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_16"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 113,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage1"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_17"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 113,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage1.write(track_meta.mIndex, ((new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_18"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "+",
                          "left" : {
                            "type" : "field",
                            "value" : ["track_meta_0", "mSizeInTable"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_15"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_18"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_16"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 114,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_18"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_15"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_18"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_16"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 114,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage1"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_18"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 114,
            "column" : 8,
            "source_fragment" : "packet_size_stage1.write(track_meta.mIndex, ((new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size))"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage1"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 115,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage1.write(track_meta.mIndex, arrival_time)"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.hash2",
      "id" : 5,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_19"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffec"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_19"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "protocol"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x06"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 120,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_19"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xfff8"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_19"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["ipv4", "protocol"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x06"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 120,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "arrival_time_0"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 121,
            "column" : 8,
            "source_fragment" : "arrival_time = standard_metadata.ingress_global_timestamp"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_0"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 124,
            "column" : 8,
            "source_fragment" : "hash(track_meta.mIndex, HashAlgorithm.crc32, (bit<32>)0, {ipAddr1, ..."
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "last_time_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage2"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 131,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage2.read(last_time, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mSizeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage2"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 132,
            "column" : 8,
            "source_fragment" : "packet_size_stage2.read(track_meta.mSizeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mFirstTimeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage2"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 133,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage2.read(track_meta.mFirstTimeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_20"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_20"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : ">",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "-",
                              "left" : {
                                "type" : "field",
                                "value" : ["standard_metadata", "ingress_global_timestamp"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "last_time_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffffffffffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "field",
                        "value" : ["scalars", "time_threshold_0"]
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 134,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_20"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_20"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "-",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "last_time_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffffffffffff"
                              }
                            }
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time_threshold_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 134,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_21"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["track_meta_0", "mFirstTimeInTable"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_21"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_20"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 137,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_21"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_21"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_20"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 137,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage2"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_21"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 137,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage2.write(track_meta.mIndex, ((new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_22"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "+",
                          "left" : {
                            "type" : "field",
                            "value" : ["track_meta_0", "mSizeInTable"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_19"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_22"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_20"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 138,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_22"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_19"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_22"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_20"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 138,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage2"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_22"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 138,
            "column" : 8,
            "source_fragment" : "packet_size_stage2.write(track_meta.mIndex, ((new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size))"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage2"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 139,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage2.write(track_meta.mIndex, arrival_time)"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.hash3",
      "id" : 6,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_23"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffec"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_23"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "protocol"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x06"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 144,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_23"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xfff8"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_23"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["ipv4", "protocol"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x06"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 144,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "arrival_time_0"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 145,
            "column" : 8,
            "source_fragment" : "arrival_time = standard_metadata.ingress_global_timestamp"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_1"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 148,
            "column" : 8,
            "source_fragment" : "hash(track_meta.mIndex, HashAlgorithm.csum16, (bit<32>)0, {ipAddr1, ..."
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "last_time_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage3"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 155,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage3.read(last_time, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mSizeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage3"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 156,
            "column" : 8,
            "source_fragment" : "packet_size_stage3.read(track_meta.mSizeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mFirstTimeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage3"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 157,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage3.read(track_meta.mFirstTimeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_24"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_24"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : ">",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "-",
                              "left" : {
                                "type" : "field",
                                "value" : ["standard_metadata", "ingress_global_timestamp"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "last_time_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffffffffffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "field",
                        "value" : ["scalars", "time_threshold_0"]
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 158,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_24"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_24"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "-",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "last_time_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffffffffffff"
                              }
                            }
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time_threshold_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 158,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_25"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["track_meta_0", "mFirstTimeInTable"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_25"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_24"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 161,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_25"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_25"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_24"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 161,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage3"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_25"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 161,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage3.write(track_meta.mIndex, ((new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_26"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "+",
                          "left" : {
                            "type" : "field",
                            "value" : ["track_meta_0", "mSizeInTable"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_23"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_26"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_24"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 162,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_26"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_23"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_26"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_24"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 162,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage3"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_26"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 162,
            "column" : 8,
            "source_fragment" : "packet_size_stage3.write(track_meta.mIndex, ((new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size))"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage3"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 163,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage3.write(track_meta.mIndex, arrival_time)"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.hash4",
      "id" : 7,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_27"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffec"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_27"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "protocol"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x06"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 168,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_27"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["ipv4", "totalLen"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffec"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xfff8"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_27"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["ipv4", "protocol"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x06"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 168,
            "column" : 15,
            "source_fragment" : "(hdr.ipv4.protocol == 0x06) ? (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.tcp.minSizeInBytes()) : (bit<32>)(hdr.ipv4.totalLen - (bit<16>)hdr.ipv4.minSizeInBytes() - (bit<16>)hdr.udp.minSizeInBytes())"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "arrival_time_0"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 169,
            "column" : 8,
            "source_fragment" : "arrival_time = standard_metadata.ingress_global_timestamp"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_2"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 172,
            "column" : 8,
            "source_fragment" : "hash(track_meta.mIndex, HashAlgorithm.crc16, (bit<32>)0, {ipAddr1, ..."
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "last_time_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage4"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 179,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage4.read(last_time, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mSizeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage4"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 180,
            "column" : 8,
            "source_fragment" : "packet_size_stage4.read(track_meta.mSizeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["track_meta_0", "mFirstTimeInTable"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage4"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 181,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage4.read(track_meta.mFirstTimeInTable, track_meta.mIndex)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_28"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_28"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : ">",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "-",
                              "left" : {
                                "type" : "field",
                                "value" : ["standard_metadata", "ingress_global_timestamp"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "last_time_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffffffffffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "field",
                        "value" : ["scalars", "time_threshold_0"]
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 182,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_28"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_28"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "-",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "last_time_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffffffffffff"
                              }
                            }
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time_threshold_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 182,
            "column" : 19,
            "source_fragment" : "((arrival_time - last_time) > time_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_29"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["track_meta_0", "mFirstTimeInTable"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_29"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_28"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 185,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_29"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_global_timestamp"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_29"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_28"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 185,
            "column" : 59,
            "source_fragment" : "(new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage4"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_29"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 185,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage4.write(track_meta.mIndex, ((new_flow == 0) ? (bit<48>)track_meta.mFirstTimeInTable : (bit<48>)arrival_time))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_30"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "+",
                          "left" : {
                            "type" : "field",
                            "value" : ["track_meta_0", "mSizeInTable"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_27"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_30"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "tmp_28"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 186,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_30"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_27"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_30"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_28"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x00"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 186,
            "column" : 53,
            "source_fragment" : "(new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage4"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_30"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 186,
            "column" : 8,
            "source_fragment" : "packet_size_stage4.write(track_meta.mIndex, ((new_flow == 0) ? (bit<32>)(track_meta.mSizeInTable + size) : (bit<32>)size))"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_last_time_stage4"
            },
            {
              "type" : "field",
              "value" : ["track_meta_0", "mIndex"]
            },
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_global_timestamp"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 187,
            "column" : 8,
            "source_fragment" : "packet_last_time_stage4.write(track_meta.mIndex, arrival_time)"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.check_flow",
      "id" : 8,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "key1_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_3"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 191,
            "column" : 8,
            "source_fragment" : "hash(key1, HashAlgorithm.crc16, (bit<32>)0, {ipAddr1, ipAddr2, port1, port2, hdr.ipv4.protocol}, (bit<32>)32)"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "key2_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_4"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 192,
            "column" : 8,
            "source_fragment" : "hash(key2, HashAlgorithm.crc32, (bit<32>)0, {ipAddr1, ipAddr2, port1, port2, hdr.ipv4.protocol}, (bit<32>)32)"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "key3_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_5"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 193,
            "column" : 8,
            "source_fragment" : "hash(key3, HashAlgorithm.csum16, (bit<32>)0, {ipAddr1, ipAddr2, port1, port2, hdr.ipv4.protocol}, (bit<32>)32)"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "key4_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "calculation",
              "value" : "calc_6"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000020"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 194,
            "column" : 8,
            "source_fragment" : "hash(key4, HashAlgorithm.crc16, (bit<32>)0, {ipAddr1, ipAddr2, port1, port2, hdr.ipv4.protocol}, (bit<32>)32)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "val1_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key1_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 196,
            "column" : 8,
            "source_fragment" : "bloom_filter.read(val1, key1)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "val2_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key2_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 197,
            "column" : 8,
            "source_fragment" : "bloom_filter.read(val2, key2)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "val3_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key3_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 198,
            "column" : 8,
            "source_fragment" : "bloom_filter.read(val3, key3)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "val4_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key4_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 199,
            "column" : 8,
            "source_fragment" : "bloom_filter.read(val4, key4)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.overflow_flag"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 200,
            "column" : 8,
            "source_fragment" : "metadata.overflow_flag = (bit<1>) 0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_31"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_31"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "==",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "val1_0"]
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0x01"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "==",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "val2_0"]
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0x01"
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "val3_0"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "val4_0"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 201,
            "column" : 12,
            "source_fragment" : "(val1 == (bit<1>)1 && val2 == (bit<1>)1 && val3 == (bit<1>)1 && val4 == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_31"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_31"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "==",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "val1_0"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0x01"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "==",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "val2_0"]
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0x01"
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "==",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "val3_0"]
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0x01"
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "val4_0"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 201,
            "column" : 12,
            "source_fragment" : "(val1 == (bit<1>)1 && val2 == (bit<1>)1 && val3 == (bit<1>)1 && val4 == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "f_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_31"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 201,
            "column" : 8,
            "source_fragment" : "f ="
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.classify_flow",
      "id" : 9,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size1_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage1"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key1_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 205,
            "column" : 8,
            "source_fragment" : "packet_size_stage1.read(size1, key1)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size2_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage2"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key2_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 206,
            "column" : 8,
            "source_fragment" : "packet_size_stage2.read(size2, key2)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size3_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage3"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key3_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 207,
            "column" : 8,
            "source_fragment" : "packet_size_stage3.read(size3, key3)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size4_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_size_stage4"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key4_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 208,
            "column" : 8,
            "source_fragment" : "packet_size_stage4.read(size4, key4)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_0"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size1_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_0"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "size1_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size3_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 53,
            "source_fragment" : "(siz1 <= siz3) ? siz1 : siz3"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_0"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size3_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_0"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 53,
            "source_fragment" : "(siz1 <= siz3) ? siz1 : siz3"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "size1_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size2_0"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "size3_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size4_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 19,
            "source_fragment" : "(siz1 <= siz2 && siz3 <= siz4) ? ((siz1 <= siz3) ? siz1 : siz3) : ((siz2 <= siz1 && siz3 <= siz4) ? ((siz2 <= siz3) ? siz2 : siz3) : ((siz1 <= siz2 && siz4 <= siz3) ? ((siz1 <= siz4) ? siz1 : siz4) : ((siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1)))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_2"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size2_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_2"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "size2_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size3_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 120,
            "source_fragment" : "(siz2 <= siz3) ? siz2 : siz3"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_2"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size3_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_2"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 120,
            "source_fragment" : "(siz2 <= siz3) ? siz2 : siz3"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_1"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_2"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_1"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 86,
            "source_fragment" : "(siz2 <= siz1 && siz3 <= siz4) ? ((siz2 <= siz3) ? siz2 : siz3) : ((siz1 <= siz2 && siz4 <= siz3) ? ((siz1 <= siz4) ? siz1 : siz4) : ((siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_4"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size1_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_4"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "size1_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size4_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 187,
            "source_fragment" : "(siz1 <= siz4) ? siz1 : siz4"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_4"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size4_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_4"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 187,
            "source_fragment" : "(siz1 <= siz4) ? siz1 : siz4"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_3"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_4"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_3"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 153,
            "source_fragment" : "(siz1 <= siz2 && siz4 <= siz3) ? ((siz1 <= siz4) ? siz1 : siz4) : ((siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_6"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size2_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_6"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size1_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size2_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size2_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size1_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "size2_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size4_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 254,
            "source_fragment" : "(siz2 <= siz4) ? siz2 : siz4"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_6"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size4_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_6"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size1_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size2_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size2_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size1_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "size4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 254,
            "source_fragment" : "(siz2 <= siz4) ? siz2 : siz4"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_5"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_6"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_5"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 220,
            "source_fragment" : "(siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_5"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size1_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_5"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "size4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 220,
            "source_fragment" : "(siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_3"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_5"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_3"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size2_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size1_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "size4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 153,
            "source_fragment" : "(siz1 <= siz2 && siz4 <= siz3) ? ((siz1 <= siz4) ? siz1 : siz4) : ((siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_1"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_3"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_1"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "size4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 86,
            "source_fragment" : "(siz2 <= siz1 && siz3 <= siz4) ? ((siz2 <= siz3) ? siz2 : siz3) : ((siz1 <= siz2 && siz4 <= siz3) ? ((siz1 <= siz4) ? siz1 : siz4) : ((siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_1"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "size3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 85,
            "column" : 19,
            "source_fragment" : "(siz1 <= siz2 && siz3 <= siz4) ? ((siz1 <= siz3) ? siz1 : siz3) : ((siz2 <= siz1 && siz3 <= siz4) ? ((siz2 <= siz3) ? siz2 : siz3) : ((siz1 <= siz2 && siz4 <= siz3) ? ((siz1 <= siz4) ? siz1 : siz4) : ((siz2 <= siz1 && siz4 <= siz3) ? ((siz2 <= siz4) ? siz2 : siz4) : siz1)))"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "time1_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage1"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key1_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 212,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage1.read(time1, key1)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "time2_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage2"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key2_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 213,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage2.read(time2, key2)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "time3_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage3"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key3_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 214,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage3.read(time3, key3)"
          }
        },
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "time4_0"]
            },
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.packet_start_time_stage4"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key4_0"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 215,
            "column" : 8,
            "source_fragment" : "packet_start_time_stage4.read(time4, key4)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_8"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time4_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_8"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "time2_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time4_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 55,
            "source_fragment" : "(tim2 <= tim4) ? tim4 : tim2"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_8"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time2_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_8"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 55,
            "source_fragment" : "(tim2 <= tim4) ? tim4 : tim2"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_7"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_8"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_7"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "time1_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time2_0"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "time3_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time4_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 21,
            "source_fragment" : "(tim1 <= tim2 && tim3 <= tim4) ? ((tim2 <= tim4) ? tim4 : tim2) : ((tim2 <= tim1 && tim3 <= tim4) ? ((tim1 <= tim4) ? tim4 : tim1) : ((tim1 <= tim2 && tim4 <= tim3) ? ((tim2 <= tim3) ? tim3 : tim2) : ((tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4)))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_10"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time4_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_10"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "time1_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time4_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 122,
            "source_fragment" : "(tim1 <= tim4) ? tim4 : tim1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_10"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time1_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_10"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 122,
            "source_fragment" : "(tim1 <= tim4) ? tim4 : tim1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_9"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_10"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_9"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 88,
            "source_fragment" : "(tim2 <= tim1 && tim3 <= tim4) ? ((tim1 <= tim4) ? tim4 : tim1) : ((tim1 <= tim2 && tim4 <= tim3) ? ((tim2 <= tim3) ? tim3 : tim2) : ((tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_12"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time3_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_12"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "time2_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time3_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 189,
            "source_fragment" : "(tim2 <= tim3) ? tim3 : tim2"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_12"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time2_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_12"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 189,
            "source_fragment" : "(tim2 <= tim3) ? tim3 : tim2"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_11"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_12"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_11"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 155,
            "source_fragment" : "(tim1 <= tim2 && tim4 <= tim3) ? ((tim2 <= tim3) ? tim3 : tim2) : ((tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_14"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time3_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_14"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time1_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time2_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time2_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time1_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "time1_0"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "time3_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 256,
            "source_fragment" : "(tim1 <= tim3) ? tim3 : tim1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_14"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time1_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_14"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time1_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time2_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "not",
                                      "left" : null,
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "and",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time2_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time1_0"]
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "<=",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time3_0"]
                                              },
                                              "right" : {
                                                "type" : "field",
                                                "value" : ["scalars", "time4_0"]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 256,
            "source_fragment" : "(tim1 <= tim3) ? tim3 : tim1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_13"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_14"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_13"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 222,
            "source_fragment" : "(tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_13"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "time4_0"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_13"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "not",
                                  "left" : null,
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "and",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time2_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time1_0"]
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<=",
                                          "left" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time3_0"]
                                          },
                                          "right" : {
                                            "type" : "field",
                                            "value" : ["scalars", "time4_0"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 222,
            "source_fragment" : "(tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_11"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_13"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_11"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "not",
                              "left" : null,
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "and",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time2_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time1_0"]
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "<=",
                                      "left" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time3_0"]
                                      },
                                      "right" : {
                                        "type" : "field",
                                        "value" : ["scalars", "time4_0"]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 155,
            "source_fragment" : "(tim1 <= tim2 && tim4 <= tim3) ? ((tim2 <= tim3) ? tim3 : tim2) : ((tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_9"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_11"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_9"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "not",
                          "left" : null,
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "and",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time2_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time1_0"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "<=",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time3_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "time4_0"]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 88,
            "source_fragment" : "(tim2 <= tim1 && tim3 <= tim4) ? ((tim1 <= tim4) ? tim4 : tim1) : ((tim1 <= tim2 && tim4 <= tim3) ? ((tim2 <= tim3) ? tim3 : tim2) : ((tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_7"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_9"]
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_7"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time1_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time2_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "time3_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "time4_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 90,
            "column" : 21,
            "source_fragment" : "(tim1 <= tim2 && tim3 <= tim4) ? ((tim2 <= tim4) ? tim4 : tim2) : ((tim2 <= tim1 && tim3 <= tim4) ? ((tim1 <= tim4) ? tim4 : tim1) : ((tim1 <= tim2 && tim4 <= tim3) ? ((tim2 <= tim3) ? tim3 : tim2) : ((tim2 <= tim1 && tim4 <= tim3) ? ((tim1 <= tim3) ? tim3 : tim1) : tim4)))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_32"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_32"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">=",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size_threshold_0"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp"]
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "size_threshold_limit_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 218,
            "column" : 24,
            "source_fragment" : "(new_size >= size_threshold && new_size < size_threshold_limit) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_32"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_32"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : ">=",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size_threshold_0"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "<",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "size_threshold_limit_0"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 218,
            "column" : 24,
            "source_fragment" : "(new_size >= size_threshold && new_size < size_threshold_limit) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size_overflow_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_32"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 218,
            "column" : 8,
            "source_fragment" : "size_overflow ="
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_33"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_33"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : ">=",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "-",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "arrival_time_0"]
                              },
                              "right" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_7"]
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffffffffffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "field",
                        "value" : ["scalars", "duration_threshold_0"]
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 219,
            "column" : 28,
            "source_fragment" : "((arrival_time - first_time) >= duration_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_33"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_33"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">=",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "-",
                                  "left" : {
                                    "type" : "field",
                                    "value" : ["scalars", "arrival_time_0"]
                                  },
                                  "right" : {
                                    "type" : "field",
                                    "value" : ["scalars", "tmp_7"]
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xffffffffffff"
                              }
                            }
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["scalars", "duration_threshold_0"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 219,
            "column" : 28,
            "source_fragment" : "((arrival_time - first_time) >= duration_threshold) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "duration_overflow_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_33"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 219,
            "column" : 8,
            "source_fragment" : "duration_overflow ="
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_34"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_34"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_32"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_33"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 221,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_34"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_34"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_32"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_33"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 221,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key1_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_34"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 221,
            "column" : 8,
            "source_fragment" : "bloom_filter.write(key1, ((size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_35"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_35"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_32"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_33"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 222,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_35"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_35"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_32"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_33"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 222,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key2_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_35"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 222,
            "column" : 8,
            "source_fragment" : "bloom_filter.write(key2, ((size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_36"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_36"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_32"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_33"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 223,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_36"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_36"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_32"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_33"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 223,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key3_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_36"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 223,
            "column" : 8,
            "source_fragment" : "bloom_filter.write(key3, ((size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0))"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_37"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_37"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "and",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_32"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      },
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "==",
                          "left" : {
                            "type" : "field",
                            "value" : ["scalars", "tmp_33"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 224,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_37"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "hexstr",
                    "value" : "0x00"
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["scalars", "tmp_37"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "not",
                      "left" : null,
                      "right" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "and",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_32"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          },
                          "right" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "==",
                              "left" : {
                                "type" : "field",
                                "value" : ["scalars", "tmp_33"]
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x01"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 224,
            "column" : 34,
            "source_fragment" : "(size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "basic_tutorial_ingress.bloom_filter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "key4_0"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_37"]
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 224,
            "column" : 8,
            "source_fragment" : "bloom_filter.write(key4, ((size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1) ? (bit<1>)1 : (bit<1>)0))"
          }
        }
      ]
    },
    {
      "name" : "basic_tutorial_ingress.send_to_controller",
      "id" : 10,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.overflow_flag"]
            },
            {
              "type" : "hexstr",
              "value" : "0x01"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 233,
            "column" : 8,
            "source_fragment" : "metadata.overflow_flag = (bit<1>) 1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00ff"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 240,
            "column" : 8,
            "source_fragment" : "standard_metadata.egress_spec = 255"
          }
        }
      ]
    },
    {
      "name" : "act",
      "id" : 11,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["packet_out", "egress_port"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0x01ff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 43,
            "column" : 16,
            "source_fragment" : "standard_metadata.egress_spec = (bit<9>)hdr.packet_out.egress_port"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "mcast_grp"]
            },
            {
              "type" : "field",
              "value" : ["packet_out", "mcast_grp"]
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 44,
            "column" : 16,
            "source_fragment" : "standard_metadata.mcast_grp = hdr.packet_out.mcast_grp"
          }
        },
        {
          "op" : "remove_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "packet_out"
            }
          ],
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 45,
            "column" : 16,
            "source_fragment" : "hdr.packet_out.setInvalid()"
          }
        }
      ]
    },
    {
      "name" : "act_0",
      "id" : 12,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "time_threshold_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x000000f42400"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 46,
            "column" : 4,
            "source_fragment" : "bit<48> time_threshold = (bit<48>) 16000000;"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "duration_threshold_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x000000989680"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 47,
            "column" : 4,
            "source_fragment" : "bit<48> duration_threshold = (bit<48>) 10000000;"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size_threshold_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00002800"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 51,
            "column" : 4,
            "source_fragment" : "bit<32> size_threshold = (bit<32>) 10240;"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "size_threshold_limit_0"]
            },
            {
              "type" : "hexstr",
              "value" : "0x000033b8"
            }
          ],
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 52,
            "column" : 4,
            "source_fragment" : "bit<32> size_threshold_limit = (bit<32>) 13240;"
          }
        }
      ]
    },
    {
      "name" : "act_1",
      "id" : 13,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "src_port"]
            },
            {
              "type" : "field",
              "value" : ["tcp", "srcPort"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 30,
            "column" : 20,
            "source_fragment" : "hdr.packet_in.src_port = hdr.tcp.srcPort"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "dst_port"]
            },
            {
              "type" : "field",
              "value" : ["tcp", "dstPort"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 31,
            "column" : 20,
            "source_fragment" : "hdr.packet_in.dst_port = hdr.tcp.dstPort"
          }
        }
      ]
    },
    {
      "name" : "act_2",
      "id" : 14,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "src_port"]
            },
            {
              "type" : "field",
              "value" : ["udp", "srcPort"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 33,
            "column" : 20,
            "source_fragment" : "hdr.packet_in.src_port = hdr.udp.srcPort"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "dst_port"]
            },
            {
              "type" : "field",
              "value" : ["udp", "dstPort"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 34,
            "column" : 20,
            "source_fragment" : "hdr.packet_in.dst_port = hdr.udp.dstPort"
          }
        }
      ]
    },
    {
      "name" : "act_3",
      "id" : 15,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "algo_indicator"]
            },
            {
              "type" : "hexstr",
              "value" : "0x0002"
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 25,
            "column" : 16,
            "source_fragment" : "hdr.packet_in.algo_indicator = (bit<16>) 2"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "src_ip"]
            },
            {
              "type" : "field",
              "value" : ["ipv4", "srcAddr"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 26,
            "column" : 16,
            "source_fragment" : "hdr.packet_in.src_ip = hdr.ipv4.srcAddr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "dst_ip"]
            },
            {
              "type" : "field",
              "value" : ["ipv4", "dstAddr"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 27,
            "column" : 16,
            "source_fragment" : "hdr.packet_in.dst_ip = hdr.ipv4.dstAddr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "proto"]
            },
            {
              "type" : "field",
              "value" : ["ipv4", "protocol"]
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 28,
            "column" : 16,
            "source_fragment" : "hdr.packet_in.proto = hdr.ipv4.protocol"
          }
        }
      ]
    },
    {
      "name" : "act_4",
      "id" : 16,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "add_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "packet_in"
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 23,
            "column" : 12,
            "source_fragment" : "hdr.packet_in.setValid()"
          }
        }
      ]
    },
    {
      "name" : "act_5",
      "id" : 17,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "ingress_port"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_port"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 37,
            "column" : 12,
            "source_fragment" : "hdr.packet_in.ingress_port = (bit<16>)standard_metadata.ingress_port"
          }
        }
      ]
    }
  ],
  "pipelines" : [
    {
      "name" : "ingress",
      "id" : 0,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 20,
        "column" : 8,
        "source_fragment" : "basic_tutorial_ingress"
      },
      "init_table" : "tbl_act",
      "tables" : [
        {
          "name" : "tbl_act",
          "id" : 0,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 46,
            "column" : 4,
            "source_fragment" : "bit<48> time_threshold = (bit<48>) 16000000; ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [12],
          "actions" : ["act_0"],
          "base_default_next" : "node_3",
          "next_tables" : {
            "act_0" : "node_3"
          },
          "default_entry" : {
            "action_id" : 12,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_act_0",
          "id" : 1,
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 43,
            "column" : 46,
            "source_fragment" : "= (bit<9>)hdr.packet_out.egress_port; ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [11],
          "actions" : ["act"],
          "base_default_next" : "tbl_hash1",
          "next_tables" : {
            "act" : "tbl_hash1"
          },
          "default_entry" : {
            "action_id" : 11,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "basic_tutorial_ingress.ipv4_forwarding.ipv4_lpm",
          "id" : 2,
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 26,
            "column" : 10,
            "source_fragment" : "ipv4_lpm"
          },
          "key" : [
            {
              "match_type" : "lpm",
              "name" : "hdr.ipv4.dstAddr",
              "target" : ["ipv4", "dstAddr"],
              "mask" : null
            }
          ],
          "match_type" : "lpm",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [2, 3, 0, 1],
          "actions" : ["basic_tutorial_ingress.ipv4_forwarding.send_to_cpu", "basic_tutorial_ingress.ipv4_forwarding.ipv4_forward", "drop", "NoAction"],
          "base_default_next" : "tbl_hash1",
          "next_tables" : {
            "basic_tutorial_ingress.ipv4_forwarding.send_to_cpu" : "tbl_hash1",
            "basic_tutorial_ingress.ipv4_forwarding.ipv4_forward" : "tbl_hash1",
            "drop" : "tbl_hash1",
            "NoAction" : "tbl_hash1"
          },
          "default_entry" : {
            "action_id" : 2,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "tbl_hash1",
          "id" : 3,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 250,
            "column" : 8,
            "source_fragment" : "hash1(hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, metadata.l4_src_port, metadata.l4_dst_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [4],
          "actions" : ["basic_tutorial_ingress.hash1"],
          "base_default_next" : "tbl_hash2",
          "next_tables" : {
            "basic_tutorial_ingress.hash1" : "tbl_hash2"
          },
          "default_entry" : {
            "action_id" : 4,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_hash2",
          "id" : 4,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 251,
            "column" : 8,
            "source_fragment" : "hash2(hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, metadata.l4_src_port, metadata.l4_dst_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [5],
          "actions" : ["basic_tutorial_ingress.hash2"],
          "base_default_next" : "tbl_hash3",
          "next_tables" : {
            "basic_tutorial_ingress.hash2" : "tbl_hash3"
          },
          "default_entry" : {
            "action_id" : 5,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_hash3",
          "id" : 5,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 252,
            "column" : 8,
            "source_fragment" : "hash3(hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, metadata.l4_src_port, metadata.l4_dst_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [6],
          "actions" : ["basic_tutorial_ingress.hash3"],
          "base_default_next" : "tbl_hash4",
          "next_tables" : {
            "basic_tutorial_ingress.hash3" : "tbl_hash4"
          },
          "default_entry" : {
            "action_id" : 6,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_hash4",
          "id" : 6,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 253,
            "column" : 8,
            "source_fragment" : "hash4(hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, metadata.l4_src_port, metadata.l4_dst_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [7],
          "actions" : ["basic_tutorial_ingress.hash4"],
          "base_default_next" : "tbl_check_flow",
          "next_tables" : {
            "basic_tutorial_ingress.hash4" : "tbl_check_flow"
          },
          "default_entry" : {
            "action_id" : 7,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_check_flow",
          "id" : 7,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 254,
            "column" : 8,
            "source_fragment" : "check_flow(hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, metadata.l4_src_port, metadata.l4_dst_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [8],
          "actions" : ["basic_tutorial_ingress.check_flow"],
          "base_default_next" : "node_12",
          "next_tables" : {
            "basic_tutorial_ingress.check_flow" : "node_12"
          },
          "default_entry" : {
            "action_id" : 8,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_classify_flow",
          "id" : 8,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 256,
            "column" : 12,
            "source_fragment" : "classify_flow()"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [9],
          "actions" : ["basic_tutorial_ingress.classify_flow"],
          "base_default_next" : "node_14",
          "next_tables" : {
            "basic_tutorial_ingress.classify_flow" : "node_14"
          },
          "default_entry" : {
            "action_id" : 9,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_send_to_controller",
          "id" : 9,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 258,
            "column" : 16,
            "source_fragment" : "send_to_controller(metadata.l4_src_port, metadata.l4_dst_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [10],
          "actions" : ["basic_tutorial_ingress.send_to_controller"],
          "base_default_next" : null,
          "next_tables" : {
            "basic_tutorial_ingress.send_to_controller" : null
          },
          "default_entry" : {
            "action_id" : 10,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        }
      ],
      "action_profiles" : [],
      "conditionals" : [
        {
          "name" : "node_3",
          "id" : 0,
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 41,
            "column" : 11,
            "source_fragment" : "hdr.ipv4.isValid()"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "d2b",
              "left" : null,
              "right" : {
                "type" : "field",
                "value" : ["ipv4", "$valid$"]
              }
            }
          },
          "true_next" : "node_4",
          "false_next" : "tbl_hash1"
        },
        {
          "name" : "node_4",
          "id" : 1,
          "source_info" : {
            "filename" : "includes/ipv4_forward.p4",
            "line" : 42,
            "column" : 15,
            "source_fragment" : "standard_metadata.ingress_port == 255"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["standard_metadata", "ingress_port"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00ff"
              }
            }
          },
          "true_next" : "tbl_act_0",
          "false_next" : "basic_tutorial_ingress.ipv4_forwarding.ipv4_lpm"
        },
        {
          "name" : "node_12",
          "id" : 2,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 255,
            "column" : 12,
            "source_fragment" : "f == (bit<1>)0"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["scalars", "f_0"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00"
              }
            }
          },
          "false_next" : null,
          "true_next" : "tbl_classify_flow"
        },
        {
          "name" : "node_14",
          "id" : 3,
          "source_info" : {
            "filename" : "basic_tutorial_switch.p4",
            "line" : 257,
            "column" : 16,
            "source_fragment" : "size_overflow == (bit<1>)1 && duration_overflow == (bit<1>)1"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "and",
              "left" : {
                "type" : "expression",
                "value" : {
                  "op" : "==",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "size_overflow_0"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  }
                }
              },
              "right" : {
                "type" : "expression",
                "value" : {
                  "op" : "==",
                  "left" : {
                    "type" : "field",
                    "value" : ["scalars", "duration_overflow_0"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  }
                }
              }
            }
          },
          "false_next" : null,
          "true_next" : "tbl_send_to_controller"
        }
      ]
    },
    {
      "name" : "egress",
      "id" : 1,
      "source_info" : {
        "filename" : "basic_tutorial_switch.p4",
        "line" : 269,
        "column" : 8,
        "source_fragment" : "basic_tutorial_egress"
      },
      "init_table" : "node_18",
      "tables" : [
        {
          "name" : "tbl_act_1",
          "id" : 10,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 23,
            "column" : 12,
            "source_fragment" : "hdr.packet_in.setValid()"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [16],
          "actions" : ["act_4"],
          "base_default_next" : "node_20",
          "next_tables" : {
            "act_4" : "node_20"
          },
          "default_entry" : {
            "action_id" : 16,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_act_2",
          "id" : 11,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 25,
            "column" : 45,
            "source_fragment" : "= (bit<16>) 2; ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [15],
          "actions" : ["act_3"],
          "base_default_next" : "node_22",
          "next_tables" : {
            "act_3" : "node_22"
          },
          "default_entry" : {
            "action_id" : 15,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_act_3",
          "id" : 12,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 30,
            "column" : 43,
            "source_fragment" : "= hdr.tcp.srcPort; ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [13],
          "actions" : ["act_1"],
          "base_default_next" : "tbl_act_5",
          "next_tables" : {
            "act_1" : "tbl_act_5"
          },
          "default_entry" : {
            "action_id" : 13,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_act_4",
          "id" : 13,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 33,
            "column" : 43,
            "source_fragment" : "= hdr.udp.srcPort; ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [14],
          "actions" : ["act_2"],
          "base_default_next" : "tbl_act_5",
          "next_tables" : {
            "act_2" : "tbl_act_5"
          },
          "default_entry" : {
            "action_id" : 14,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_act_5",
          "id" : 14,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 37,
            "column" : 39,
            "source_fragment" : "="
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [17],
          "actions" : ["act_5"],
          "base_default_next" : null,
          "next_tables" : {
            "act_5" : null
          },
          "default_entry" : {
            "action_id" : 17,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        }
      ],
      "action_profiles" : [],
      "conditionals" : [
        {
          "name" : "node_18",
          "id" : 4,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 22,
            "column" : 12,
            "source_fragment" : "standard_metadata.egress_port == 255"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["standard_metadata", "egress_port"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00ff"
              }
            }
          },
          "false_next" : null,
          "true_next" : "tbl_act_1"
        },
        {
          "name" : "node_20",
          "id" : 5,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 24,
            "column" : 16,
            "source_fragment" : "metadata.overflow_flag == (bit<1>) 1"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["scalars", "metadata_t.overflow_flag"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x01"
              }
            }
          },
          "true_next" : "tbl_act_2",
          "false_next" : "tbl_act_5"
        },
        {
          "name" : "node_22",
          "id" : 6,
          "source_info" : {
            "filename" : "includes/packetio.p4",
            "line" : 29,
            "column" : 20,
            "source_fragment" : "hdr.tcp.isValid()"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "d2b",
              "left" : null,
              "right" : {
                "type" : "field",
                "value" : ["tcp", "$valid$"]
              }
            }
          },
          "true_next" : "tbl_act_3",
          "false_next" : "tbl_act_4"
        }
      ]
    }
  ],
  "checksums" : [
    {
      "name" : "cksum",
      "id" : 0,
      "source_info" : {
        "filename" : "includes/checksums.p4",
        "line" : 20,
        "column" : 8,
        "source_fragment" : "update_checksum( ..."
      },
      "target" : ["ipv4", "hdrChecksum"],
      "type" : "generic",
      "calculation" : "calc_7",
      "verify" : false,
      "update" : true,
      "if_cond" : {
        "type" : "expression",
        "value" : {
          "op" : "d2b",
          "left" : null,
          "right" : {
            "type" : "field",
            "value" : ["ipv4", "$valid$"]
          }
        }
      }
    }
  ],
  "force_arith" : [],
  "extern_instances" : [],
  "field_aliases" : [
    [
      "queueing_metadata.enq_timestamp",
      ["standard_metadata", "enq_timestamp"]
    ],
    [
      "queueing_metadata.enq_qdepth",
      ["standard_metadata", "enq_qdepth"]
    ],
    [
      "queueing_metadata.deq_timedelta",
      ["standard_metadata", "deq_timedelta"]
    ],
    [
      "queueing_metadata.deq_qdepth",
      ["standard_metadata", "deq_qdepth"]
    ],
    [
      "intrinsic_metadata.ingress_global_timestamp",
      ["standard_metadata", "ingress_global_timestamp"]
    ],
    [
      "intrinsic_metadata.egress_global_timestamp",
      ["standard_metadata", "egress_global_timestamp"]
    ],
    [
      "intrinsic_metadata.mcast_grp",
      ["standard_metadata", "mcast_grp"]
    ],
    [
      "intrinsic_metadata.egress_rid",
      ["standard_metadata", "egress_rid"]
    ],
    [
      "intrinsic_metadata.priority",
      ["standard_metadata", "priority"]
    ]
  ],
  "program" : "basic_tutorial_switch.p4",
  "__meta__" : {
    "version" : [2, 18],
    "compiler" : "https://github.com/p4lang/p4c"
  }
}